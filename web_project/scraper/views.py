from django.shortcuts import render, redirect
from .models import wishlist
from .task import *
from .amazon import *
from .chatbot import *
import os
import requests
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
import openai

@csrf_exempt
def api_view(request):
    if request.method == 'POST':
        print(request.POST)  # Debugging: Check what exactly is in POST
        user_query = request.POST.get('message', 'Default message if not found')
        print("Received message:", user_query)


        # Prepare product data text from a text file
        product_data = get_product_data_as_text("output.csv")

        # Create the prompt with product data and user query
        prompt = f"{user_query}"

        # Setup the OpenAI client with your API key
        client = OpenAI(api_key='sk-proj-dj0ZacPF2Lll30yufni0T3BlbkFJijG9bY8QYV8X0rDxoiGl')  # Replace 'sk-your-api-key' with your actual key, ensure it's securely handled

        # Make the OpenAI API call with the role defined
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": product_data},
                {"role": "assistant", "content": "you solve math questions only"},
                {"role": "user", "content": prompt}
            ],
        )

        # Extract the content from the response and clean it
        if response.choices:
            content = response.choices[0].message.content
            cleaned_content = content.replace('\n', ' ')  # Replacing newlines with spaces for better readability
            return HttpResponse(cleaned_content)
        else:
            return HttpResponse('No valid response generated by OpenAI.', status=400)  # Note the use of status code 400 for error indication

    else:
        # Return an error message for non-POST requests
        return HttpResponse('Only POST requests are allowed', status=405)

def index(request):
    return render(request, 'Landing.html')

def login(request):
    return render(request, 'Login.html')

def signup_view(request):
    if request.method == 'POST':
        # Process signup
        return redirect('login')
    return render(request, 'signup.html')

def wishlist(request):
    return render(request, 'wishlist.html')


def search_results(request):


    search_term = request.GET.get('search_term', '')

    #if search_term:
       #output_csv_path = "C:\\Users\\anoos\\shopping-assistant-2\\web_project\\scraper\\output.csv"


    #if os.path.exists(output_csv_path):
        #os.remove(output_csv_path)


    #api_call(search_term)
    results=get_product_data_csv("output.csv")
    #asins = [product[1] for product in results]
    #fetch_and_save_product_details.delay(asins)
 
    return render(request, 'results.html', {'search_term': search_term, 'products': results})
